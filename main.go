package main

import (
	"context"
	"errors"
	"log"
	"os"
	"strconv"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
	"github.com/yankeguo/snowid"
	"github.com/yankeguo/ufx"
	"go.uber.org/fx"
)

var (
	metricsGeneratorCount = promauto.NewCounter(prometheus.CounterOpts{
		Name: "snowid_generated",
		Help: "count of ids generated by snowid generator",
	})
)

func newConf() (conf ufx.Conf, err error) {
	bind := os.Getenv("BIND")
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}
	conf = ufx.Conf{
		"server": ufx.Conf{
			"listen": bind + ":" + port,
			"path": ufx.Conf{
				"readiness": "/healthz",
				"liveness":  "/healthz",
				"metrics":   "/metrics",
			},
		},
	}
	return
}

func newGenerator() (g snowid.Generator, err error) {
	var opts snowid.Options

	if opts.ID, err = extractWorkerID(); err != nil {
		return
	}

	if epoch := os.Getenv("EPOCH"); epoch != "" {
		if opts.Epoch, err = time.ParseInLocation(
			"2006-01-02 15:04:05",
			epoch,
			time.UTC,
		); err != nil {
			return
		}
	} else {
		opts.Epoch = time.Date(2020, time.January, 1, 0, 0, 0, 0, time.UTC)
	}

	if grain := os.Getenv("GRAIN"); grain != "" {
		if opts.Grain, err = time.ParseDuration(grain); err != nil {
			return
		}
	} else {
		opts.Grain = time.Millisecond
	}

	opts.LeadingBit, _ = strconv.ParseBool(os.Getenv("LEADING_BIT"))

	log.Println("WorkerID:", opts.ID)
	log.Println("Epoch:", opts.Epoch.String())
	log.Println("Grain:", opts.Grain.String())
	log.Println("LeadingBit:", opts.LeadingBit)

	return snowid.New(opts)
}

func installGenerator(g snowid.Generator, ur ufx.Router, pr ufx.Prober) {

	pr.AddChecker("snowid", func(ctx context.Context) (err error) {
		defer func() {
			if r := recover(); r != nil {
				err = errors.New("snowid panic")
			}
		}()
		g.NewID()
		return
	})

	ur.HandleFunc("/", func(c ufx.Context) {
		args := ufx.Bind[struct {
			Size int `json:"size,string"`
		}](c)

		if args.Size < 1 {
			args.Size = 1
		}

		metricsGeneratorCount.Add(float64(args.Size))

		var response []string
		for i := 0; i < args.Size; i++ {
			response = append(response, strconv.FormatUint(g.NewID(), 10))
		}

		c.Header().Add("Expires", "0")
		c.Header().Add("Cache-Control", "no-cache, no-store, max-age=0, must-revalidate")
		c.JSON(response)
	})
}

func main() {
	app := fx.New(
		fx.Provide(
			newConf,
			newGenerator,
		),
		ufx.Module,
		fx.Invoke(installGenerator),
	)
	if app.Err() != nil {
		log.Println(app.Err().Error())
		os.Exit(1)
	}
	app.Run()
}
